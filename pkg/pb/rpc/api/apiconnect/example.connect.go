// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/api/example.proto

package apiconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	api "github.com/karamaru-alpha/days/pkg/pb/rpc/api"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExampleName is the fully-qualified name of the Example service.
	ExampleName = "rpc.api.Example"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExamplePingProcedure is the fully-qualified name of the Example's Ping RPC.
	ExamplePingProcedure = "/rpc.api.Example/Ping"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	exampleServiceDescriptor    = api.File_rpc_api_example_proto.Services().ByName("Example")
	examplePingMethodDescriptor = exampleServiceDescriptor.Methods().ByName("Ping")
)

// ExampleClient is a client for the rpc.api.Example service.
type ExampleClient interface {
	Ping(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[api.ExamplePingResponse], error)
}

// NewExampleClient constructs a client for the rpc.api.Example service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExampleClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleClient{
		ping: connect.NewClient[emptypb.Empty, api.ExamplePingResponse](
			httpClient,
			baseURL+ExamplePingProcedure,
			connect.WithSchema(examplePingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// exampleClient implements ExampleClient.
type exampleClient struct {
	ping *connect.Client[emptypb.Empty, api.ExamplePingResponse]
}

// Ping calls rpc.api.Example.Ping.
func (c *exampleClient) Ping(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[api.ExamplePingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ExampleHandler is an implementation of the rpc.api.Example service.
type ExampleHandler interface {
	Ping(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[api.ExamplePingResponse], error)
}

// NewExampleHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleHandler(svc ExampleHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	examplePingHandler := connect.NewUnaryHandler(
		ExamplePingProcedure,
		svc.Ping,
		connect.WithSchema(examplePingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc.api.Example/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExamplePingProcedure:
			examplePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExampleHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleHandler struct{}

func (UnimplementedExampleHandler) Ping(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[api.ExamplePingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.api.Example.Ping is not implemented"))
}
