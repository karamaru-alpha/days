// Code generated by protoc-gen-days (generator/spanner) . DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package base

import (
	"strconv"
	"strings"
	"time"

	"github.com/scylladb/go-set/i64set"
	"github.com/scylladb/go-set/strset"
)

const (
	userExampleSelectAllQuery = "SELECT " +
		"`" + UserExampleColumnNameUserID + "`, `" + UserExampleColumnNameExample + "`, `" + UserExampleColumnNameCreatedTime + "`, `" + UserExampleColumnNameUpdatedTime + "` " +
		"FROM " + "`" + UserExampleTableName + "`"
	userExampleSelectIdxExampleQuery = "SELECT " +
		"`" + UserExampleColumnNameUserID + "`, `" + UserExampleColumnNameExample + "` " +
		"FROM " + "`" + UserExampleTableName + "`"
	userExampleSelectCountQuery = "SELECT COUNT(*) FROM `" + UserExampleTableName + "`"
)

type UserExampleQueryBuilder interface {
	SelectAll() UserExampleQueryBuilderFirstClause
	SelectIdxExample() UserExampleQueryBuilderFirstClause
	SelectAllWithIdxExample() UserExampleQueryBuilderFirstClause
	SelectCount() UserExampleQueryBuilderFirstClause
}

type UserExampleQueryBuilderFinisher interface {
	OrderBy(orderPairs OrderPairs) UserExampleQueryBuilderFinisher
	Limit(limit int) UserExampleQueryBuilderFinisher
	Offset(offset int) UserExampleQueryBuilderFinisher
	GetQuery() (string, map[string]any)
	GetQueryConditions() []*UserExampleQueryCondition
}

type UserExampleQueryBuilderFirstClause interface {
	UserExampleQueryBuilderFinisher
	Where() UserExampleQueryBuilderPredicate
}

type UserExampleQueryBuilderSecondClause interface {
	UserExampleQueryBuilderFinisher
	And() UserExampleQueryBuilderPredicate
}

type UserExampleQueryBuilderPredicate interface {
	UserIDEq(param string) UserExampleQueryBuilderSecondClause
	UserIDNe(param string) UserExampleQueryBuilderSecondClause
	UserIDGt(param string) UserExampleQueryBuilderSecondClause
	UserIDGte(param string) UserExampleQueryBuilderSecondClause
	UserIDLt(param string) UserExampleQueryBuilderSecondClause
	UserIDLte(param string) UserExampleQueryBuilderSecondClause
	UserIDIsNull() UserExampleQueryBuilderSecondClause
	UserIDIsNotNull() UserExampleQueryBuilderSecondClause
	UserIDStartsWith(param string) UserExampleQueryBuilderSecondClause
	UserIDIn(params []string) UserExampleQueryBuilderSecondClause
	UserIDNin(params []string) UserExampleQueryBuilderSecondClause
	ExampleEq(param int64) UserExampleQueryBuilderSecondClause
	ExampleNe(param int64) UserExampleQueryBuilderSecondClause
	ExampleGt(param int64) UserExampleQueryBuilderSecondClause
	ExampleGte(param int64) UserExampleQueryBuilderSecondClause
	ExampleLt(param int64) UserExampleQueryBuilderSecondClause
	ExampleLte(param int64) UserExampleQueryBuilderSecondClause
	ExampleIsNull() UserExampleQueryBuilderSecondClause
	ExampleIsNotNull() UserExampleQueryBuilderSecondClause
	ExampleIn(params []int64) UserExampleQueryBuilderSecondClause
	ExampleNin(params []int64) UserExampleQueryBuilderSecondClause
	CreatedTimeEq(param time.Time) UserExampleQueryBuilderSecondClause
	CreatedTimeNe(param time.Time) UserExampleQueryBuilderSecondClause
	CreatedTimeGt(param time.Time) UserExampleQueryBuilderSecondClause
	CreatedTimeGte(param time.Time) UserExampleQueryBuilderSecondClause
	CreatedTimeLt(param time.Time) UserExampleQueryBuilderSecondClause
	CreatedTimeLte(param time.Time) UserExampleQueryBuilderSecondClause
	CreatedTimeIsNull() UserExampleQueryBuilderSecondClause
	CreatedTimeIsNotNull() UserExampleQueryBuilderSecondClause
	UpdatedTimeEq(param time.Time) UserExampleQueryBuilderSecondClause
	UpdatedTimeNe(param time.Time) UserExampleQueryBuilderSecondClause
	UpdatedTimeGt(param time.Time) UserExampleQueryBuilderSecondClause
	UpdatedTimeGte(param time.Time) UserExampleQueryBuilderSecondClause
	UpdatedTimeLt(param time.Time) UserExampleQueryBuilderSecondClause
	UpdatedTimeLte(param time.Time) UserExampleQueryBuilderSecondClause
	UpdatedTimeIsNull() UserExampleQueryBuilderSecondClause
	UpdatedTimeIsNotNull() UserExampleQueryBuilderSecondClause
}

type UserExampleQueryCondition struct {
	column   string
	operator ConditionOperator
	value    any
}

type userExampleQueryBuilder struct {
	builder         *strings.Builder
	params          map[string]any
	paramIndex      int
	queryConditions []*UserExampleQueryCondition
}

func NewUserExampleQueryBuilder() UserExampleQueryBuilder {
	return &userExampleQueryBuilder{
		builder:         &strings.Builder{},
		params:          make(map[string]any),
		paramIndex:      0,
		queryConditions: make([]*UserExampleQueryCondition, 0),
	}
}

func (qb *userExampleQueryBuilder) addParam(condition string, param any) {
	qb.paramIndex++
	paramKey := ParamBaseKey + strconv.Itoa(qb.paramIndex)
	qb.params[paramKey] = param
	qb.builder.WriteString(condition + "@" + paramKey)
}

func (qb *userExampleQueryBuilder) SelectAll() UserExampleQueryBuilderFirstClause {
	qb.builder.WriteString(userExampleSelectAllQuery)
	return qb
}

func (qb *userExampleQueryBuilder) SelectIdxExample() UserExampleQueryBuilderFirstClause {
	qb.builder.WriteString(userExampleSelectIdxExampleQuery + "@{FORCE_INDEX=IdxUserExampleByExample}")
	return qb
}

func (qb *userExampleQueryBuilder) SelectAllWithIdxExample() UserExampleQueryBuilderFirstClause {
	qb.builder.WriteString(userExampleSelectAllQuery + "@{FORCE_INDEX=IdxUserExampleByExample}")
	return qb
}

func (qb *userExampleQueryBuilder) SelectCount() UserExampleQueryBuilderFirstClause {
	qb.builder.WriteString(userExampleSelectCountQuery)
	return qb
}

func (qb *userExampleQueryBuilder) Where() UserExampleQueryBuilderPredicate {
	qb.builder.WriteString(" WHERE ")
	return qb
}

func (qb *userExampleQueryBuilder) And() UserExampleQueryBuilderPredicate {
	qb.builder.WriteString(" AND ")
	return qb
}

func (qb *userExampleQueryBuilder) UserIDEq(param string) UserExampleQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserExampleQueryCondition{column: UserExampleColumnNameUserID, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserExampleColumnNameUserID+"` = ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UserIDNe(param string) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUserID+"` != ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UserIDGt(param string) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUserID+"` >", param)
	return qb
}

func (qb *userExampleQueryBuilder) UserIDGte(param string) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUserID+"` >= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UserIDLt(param string) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUserID+"` < ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UserIDLte(param string) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUserID+"` <= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UserIDIsNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameUserID + "` IS NULL")
	return qb
}

func (qb *userExampleQueryBuilder) UserIDIsNotNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameUserID + "` IS NOT NULL")
	return qb
}

func (qb *userExampleQueryBuilder) UserIDStartsWith(param string) UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("STARTS_WITH(`" + UserExampleColumnNameUserID + "`, ")
	qb.addParam("", param)
	qb.builder.WriteString(")")
	return qb
}

func (qb *userExampleQueryBuilder) UserIDIn(params []string) UserExampleQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserExampleQueryCondition{column: UserExampleColumnNameUserID, operator: ConditionOperatorIn, value: strset.New(params...)})
	qb.builder.WriteString("`" + UserExampleColumnNameUserID + "` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userExampleQueryBuilder) UserIDNin(params []string) UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameUserID + "` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userExampleQueryBuilder) ExampleEq(param int64) UserExampleQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserExampleQueryCondition{column: UserExampleColumnNameExample, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserExampleColumnNameExample+"` = ", param)
	return qb
}

func (qb *userExampleQueryBuilder) ExampleNe(param int64) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameExample+"` != ", param)
	return qb
}

func (qb *userExampleQueryBuilder) ExampleGt(param int64) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameExample+"` >", param)
	return qb
}

func (qb *userExampleQueryBuilder) ExampleGte(param int64) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameExample+"` >= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) ExampleLt(param int64) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameExample+"` < ", param)
	return qb
}

func (qb *userExampleQueryBuilder) ExampleLte(param int64) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameExample+"` <= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) ExampleIsNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameExample + "` IS NULL")
	return qb
}

func (qb *userExampleQueryBuilder) ExampleIsNotNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameExample + "` IS NOT NULL")
	return qb
}

func (qb *userExampleQueryBuilder) ExampleIn(params []int64) UserExampleQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserExampleQueryCondition{column: UserExampleColumnNameExample, operator: ConditionOperatorIn, value: i64set.New(params...)})
	qb.builder.WriteString("`" + UserExampleColumnNameExample + "` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userExampleQueryBuilder) ExampleNin(params []int64) UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameExample + "` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeEq(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserExampleQueryCondition{column: UserExampleColumnNameCreatedTime, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserExampleColumnNameCreatedTime+"` = ", param)
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeNe(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameCreatedTime+"` != ", param)
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeGt(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameCreatedTime+"` >", param)
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeGte(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameCreatedTime+"` >= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeLt(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameCreatedTime+"` < ", param)
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeLte(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameCreatedTime+"` <= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeIsNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameCreatedTime + "` IS NULL")
	return qb
}

func (qb *userExampleQueryBuilder) CreatedTimeIsNotNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameCreatedTime + "` IS NOT NULL")
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeEq(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserExampleQueryCondition{column: UserExampleColumnNameUpdatedTime, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserExampleColumnNameUpdatedTime+"` = ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeNe(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUpdatedTime+"` != ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeGt(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUpdatedTime+"` >", param)
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeGte(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUpdatedTime+"` >= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeLt(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUpdatedTime+"` < ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeLte(param time.Time) UserExampleQueryBuilderSecondClause {
	qb.addParam("`"+UserExampleColumnNameUpdatedTime+"` <= ", param)
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeIsNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameUpdatedTime + "` IS NULL")
	return qb
}

func (qb *userExampleQueryBuilder) UpdatedTimeIsNotNull() UserExampleQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserExampleColumnNameUpdatedTime + "` IS NOT NULL")
	return qb
}

func (qb *userExampleQueryBuilder) OrderBy(orderPairs OrderPairs) UserExampleQueryBuilderFinisher {
	qb.builder.WriteString(" ORDER BY ")
	for i, pair := range orderPairs {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.builder.WriteString("`" + pair.Column + "` " + string(pair.OrderType))
	}
	return qb
}

func (qb *userExampleQueryBuilder) Limit(limit int) UserExampleQueryBuilderFinisher {
	qb.builder.WriteString(" LIMIT " + strconv.Itoa(limit))
	return qb
}

func (qb *userExampleQueryBuilder) Offset(offset int) UserExampleQueryBuilderFinisher {
	qb.builder.WriteString(" OFFSET " + strconv.Itoa(offset))
	return qb
}

func (qb *userExampleQueryBuilder) GetQuery() (string, map[string]any) {
	return qb.builder.String(), qb.params
}

func (qb *userExampleQueryBuilder) GetQueryConditions() []*UserExampleQueryCondition {
	return qb.queryConditions
}
