// Code generated by protoc-gen-days (generator/spanner) . DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package base

import (
	"strconv"
	"strings"
	"time"

	"github.com/scylladb/go-set/strset"
)

const (
	userSelectAllQuery = "SELECT " +
		"`" + UserColumnNameUserID + "`, `" + UserColumnNameName + "`, `" + UserColumnNameCreatedTime + "`, `" + UserColumnNameUpdatedTime + "` " +
		"FROM " + "`" + UserTableName + "`"
	userSelectCountQuery = "SELECT COUNT(*) FROM `" + UserTableName + "`"
)

type UserQueryBuilder interface {
	SelectAll() UserQueryBuilderFirstClause
	SelectCount() UserQueryBuilderFirstClause
}

type UserQueryBuilderFinisher interface {
	OrderBy(orderPairs OrderPairs) UserQueryBuilderFinisher
	Limit(limit int) UserQueryBuilderFinisher
	Offset(offset int) UserQueryBuilderFinisher
	GetQuery() (string, map[string]any)
	GetQueryConditions() []*UserQueryCondition
}

type UserQueryBuilderFirstClause interface {
	UserQueryBuilderFinisher
	Where() UserQueryBuilderPredicate
}

type UserQueryBuilderSecondClause interface {
	UserQueryBuilderFinisher
	And() UserQueryBuilderPredicate
}

type UserQueryBuilderPredicate interface {
	UserIDEq(param string) UserQueryBuilderSecondClause
	UserIDNe(param string) UserQueryBuilderSecondClause
	UserIDGt(param string) UserQueryBuilderSecondClause
	UserIDGte(param string) UserQueryBuilderSecondClause
	UserIDLt(param string) UserQueryBuilderSecondClause
	UserIDLte(param string) UserQueryBuilderSecondClause
	UserIDIsNull() UserQueryBuilderSecondClause
	UserIDIsNotNull() UserQueryBuilderSecondClause
	UserIDStartsWith(param string) UserQueryBuilderSecondClause
	UserIDIn(params []string) UserQueryBuilderSecondClause
	UserIDNin(params []string) UserQueryBuilderSecondClause
	NameEq(param string) UserQueryBuilderSecondClause
	NameNe(param string) UserQueryBuilderSecondClause
	NameGt(param string) UserQueryBuilderSecondClause
	NameGte(param string) UserQueryBuilderSecondClause
	NameLt(param string) UserQueryBuilderSecondClause
	NameLte(param string) UserQueryBuilderSecondClause
	NameIsNull() UserQueryBuilderSecondClause
	NameIsNotNull() UserQueryBuilderSecondClause
	NameStartsWith(param string) UserQueryBuilderSecondClause
	NameIn(params []string) UserQueryBuilderSecondClause
	NameNin(params []string) UserQueryBuilderSecondClause
	CreatedTimeEq(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeNe(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeGt(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeGte(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeLt(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeLte(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeIsNull() UserQueryBuilderSecondClause
	CreatedTimeIsNotNull() UserQueryBuilderSecondClause
	UpdatedTimeEq(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeNe(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeGt(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeGte(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeLt(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeLte(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeIsNull() UserQueryBuilderSecondClause
	UpdatedTimeIsNotNull() UserQueryBuilderSecondClause
}

type UserQueryCondition struct {
	column   string
	operator ConditionOperator
	value    any
}

type userQueryBuilder struct {
	builder         *strings.Builder
	params          map[string]any
	paramIndex      int
	queryConditions []*UserQueryCondition
}

func NewUserQueryBuilder() UserQueryBuilder {
	return &userQueryBuilder{
		builder:         &strings.Builder{},
		params:          make(map[string]any),
		paramIndex:      0,
		queryConditions: make([]*UserQueryCondition, 0),
	}
}

func (qb *userQueryBuilder) addParam(condition string, param any) {
	qb.paramIndex++
	paramKey := ParamBaseKey + strconv.Itoa(qb.paramIndex)
	qb.params[paramKey] = param
	qb.builder.WriteString(condition + "@" + paramKey)
}

func (qb *userQueryBuilder) SelectAll() UserQueryBuilderFirstClause {
	qb.builder.WriteString(userSelectAllQuery)
	return qb
}

func (qb *userQueryBuilder) SelectCount() UserQueryBuilderFirstClause {
	qb.builder.WriteString(userSelectCountQuery)
	return qb
}

func (qb *userQueryBuilder) Where() UserQueryBuilderPredicate {
	qb.builder.WriteString(" WHERE ")
	return qb
}

func (qb *userQueryBuilder) And() UserQueryBuilderPredicate {
	qb.builder.WriteString(" AND ")
	return qb
}

func (qb *userQueryBuilder) UserIDEq(param string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: UserColumnNameUserID, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserColumnNameUserID+"` = ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDNe(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUserID+"` != ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDGt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUserID+"` >", param)
	return qb
}

func (qb *userQueryBuilder) UserIDGte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUserID+"` >= ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDLt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUserID+"` < ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDLte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUserID+"` <= ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDIsNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameUserID + "` IS NULL")
	return qb
}

func (qb *userQueryBuilder) UserIDIsNotNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameUserID + "` IS NOT NULL")
	return qb
}

func (qb *userQueryBuilder) UserIDStartsWith(param string) UserQueryBuilderSecondClause {
	qb.builder.WriteString("STARTS_WITH(`" + UserColumnNameUserID + "`, ")
	qb.addParam("", param)
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) UserIDIn(params []string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: UserColumnNameUserID, operator: ConditionOperatorIn, value: strset.New(params...)})
	qb.builder.WriteString("`" + UserColumnNameUserID + "` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) UserIDNin(params []string) UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameUserID + "` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) NameEq(param string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: UserColumnNameName, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserColumnNameName+"` = ", param)
	return qb
}

func (qb *userQueryBuilder) NameNe(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameName+"` != ", param)
	return qb
}

func (qb *userQueryBuilder) NameGt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameName+"` >", param)
	return qb
}

func (qb *userQueryBuilder) NameGte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameName+"` >= ", param)
	return qb
}

func (qb *userQueryBuilder) NameLt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameName+"` < ", param)
	return qb
}

func (qb *userQueryBuilder) NameLte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameName+"` <= ", param)
	return qb
}

func (qb *userQueryBuilder) NameIsNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameName + "` IS NULL")
	return qb
}

func (qb *userQueryBuilder) NameIsNotNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameName + "` IS NOT NULL")
	return qb
}

func (qb *userQueryBuilder) NameStartsWith(param string) UserQueryBuilderSecondClause {
	qb.builder.WriteString("STARTS_WITH(`" + UserColumnNameName + "`, ")
	qb.addParam("", param)
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) NameIn(params []string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: UserColumnNameName, operator: ConditionOperatorIn, value: strset.New(params...)})
	qb.builder.WriteString("`" + UserColumnNameName + "` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) NameNin(params []string) UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameName + "` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) CreatedTimeEq(param time.Time) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: UserColumnNameCreatedTime, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserColumnNameCreatedTime+"` = ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeNe(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameCreatedTime+"` != ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeGt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameCreatedTime+"` >", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeGte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameCreatedTime+"` >= ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeLt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameCreatedTime+"` < ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeLte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameCreatedTime+"` <= ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeIsNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameCreatedTime + "` IS NULL")
	return qb
}

func (qb *userQueryBuilder) CreatedTimeIsNotNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameCreatedTime + "` IS NOT NULL")
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeEq(param time.Time) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: UserColumnNameUpdatedTime, operator: ConditionOperatorEq, value: param})
	qb.addParam("`"+UserColumnNameUpdatedTime+"` = ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeNe(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUpdatedTime+"` != ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeGt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUpdatedTime+"` >", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeGte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUpdatedTime+"` >= ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeLt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUpdatedTime+"` < ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeLte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`"+UserColumnNameUpdatedTime+"` <= ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeIsNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameUpdatedTime + "` IS NULL")
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeIsNotNull() UserQueryBuilderSecondClause {
	qb.builder.WriteString("`" + UserColumnNameUpdatedTime + "` IS NOT NULL")
	return qb
}

func (qb *userQueryBuilder) OrderBy(orderPairs OrderPairs) UserQueryBuilderFinisher {
	qb.builder.WriteString(" ORDER BY ")
	for i, pair := range orderPairs {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.builder.WriteString("`" + pair.Column + "` " + string(pair.OrderType))
	}
	return qb
}

func (qb *userQueryBuilder) Limit(limit int) UserQueryBuilderFinisher {
	qb.builder.WriteString(" LIMIT " + strconv.Itoa(limit))
	return qb
}

func (qb *userQueryBuilder) Offset(offset int) UserQueryBuilderFinisher {
	qb.builder.WriteString(" OFFSET " + strconv.Itoa(offset))
	return qb
}

func (qb *userQueryBuilder) GetQuery() (string, map[string]any) {
	return qb.builder.String(), qb.params
}

func (qb *userQueryBuilder) GetQueryConditions() []*UserQueryCondition {
	return qb.queryConditions
}
