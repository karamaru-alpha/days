// Code generated by protoc-gen-days (generator/entity) . DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package transaction

import (
	"fmt"
	"strings"
	"time"

	"github.com/karamaru-alpha/days/pkg/domain/dto"
)

const (
	UserExampleTableName = "UserExample"
	UserExampleComment   = "UserExample"

	UserExampleColumnName_UserID      = "userID"
	UserExampleColumnName_Example     = "example"
	UserExampleColumnName_CreatedTime = "createdTime"
	UserExampleColumnName_UpdatedTime = "updatedTime"
)

// UserExample UserExample
type UserExample struct {
	// UserID
	UserID string `json:"userID,omitempty"`
	// Example
	Example int64 `json:"example,omitempty"`
	// CreatedTime
	CreatedTime time.Time `json:"createdTime,omitempty"`
	// UpdatedTime
	UpdatedTime time.Time `json:"updatedTime,omitempty"`
}

func (e *UserExample) GetPK() *UserExamplePK {
	return &UserExamplePK{
		UserID:  e.UserID,
		Example: e.Example,
	}
}

func (e *UserExample) FullDeepCopy() *UserExample {
	return &UserExample{
		UserID:      e.UserID,
		Example:     e.Example,
		CreatedTime: e.CreatedTime,
		UpdatedTime: e.UpdatedTime,
	}
}

func (e *UserExample) ToKeyValue() map[string]any {
	return map[string]any{
		UserExampleColumnName_UserID:      e.UserID,
		UserExampleColumnName_Example:     e.Example,
		UserExampleColumnName_CreatedTime: e.CreatedTime,
		UserExampleColumnName_UpdatedTime: e.UpdatedTime,
	}
}

type UserExampleSlice []*UserExample

type UserExampleMapByPK map[string]map[int64]*UserExample

func (s UserExampleSlice) CreateMapByPK() UserExampleMapByPK {
	m := make(UserExampleMapByPK, len(s))
	for _, row := range s {
		if _, ok := m[row.UserID]; !ok {
			m[row.UserID] = make(map[int64]*UserExample)
		}
		m[row.UserID][row.Example] = row
	}
	return m
}

type UserExamplePK struct {
	UserID  string
	Example int64
}

func (e *UserExamplePK) Key() string {
	return strings.Join([]string{
		fmt.Sprint(e.UserID),
		fmt.Sprint(e.Example),
	}, ".")
}

func (e *UserExamplePK) Generate() []any {
	return []any{
		e.UserID,
		e.Example,
	}
}

type UserExamplePKs []*UserExamplePK

func (e *UserExamplePK) ToEntity() *UserExample {
	return &UserExample{
		UserID:  e.UserID,
		Example: e.Example,
	}
}

// UserExampleIdxExample UserExample Index(Example)
type UserExampleIdxExample struct {
	// UserID
	UserID string
	// Example
	Example int64
}

func (e *UserExampleIdxExample) GetPK() *UserExamplePK {
	return &UserExamplePK{
		UserID:  e.UserID,
		Example: e.Example,
	}
}

func (e *UserExampleIdxExample) ToEntity() *UserExample {
	return &UserExample{
		UserID:  e.UserID,
		Example: e.Example,
	}
}

type UserExampleIdxExampleSlice []*UserExampleIdxExample

func (s UserExampleIdxExampleSlice) GetPKs() UserExamplePKs {
	pks := make(UserExamplePKs, 0, len(s))
	for _, row := range s {
		pks = append(pks, row.GetPK())
	}
	return pks
}

var UserExampleColumnMap = map[string]*dto.Column{
	UserExampleColumnName_UserID: {
		Name:    UserExampleColumnName_UserID,
		Type:    "string",
		IsList:  false,
		PK:      true,
		Comment: "UserID",
	},
	UserExampleColumnName_Example: {
		Name:    UserExampleColumnName_Example,
		Type:    "int64",
		IsList:  false,
		PK:      true,
		Comment: "Example",
	},
	UserExampleColumnName_CreatedTime: {
		Name:    UserExampleColumnName_CreatedTime,
		Type:    "time.Time",
		IsList:  false,
		PK:      false,
		Comment: "CreatedTime",
	},
	UserExampleColumnName_UpdatedTime: {
		Name:    UserExampleColumnName_UpdatedTime,
		Type:    "time.Time",
		IsList:  false,
		PK:      false,
		Comment: "UpdatedTime",
	},
}

var UserExampleColumns = dto.Columns{
	UserExampleColumnMap[UserExampleColumnName_UserID],
	UserExampleColumnMap[UserExampleColumnName_Example],
	UserExampleColumnMap[UserExampleColumnName_CreatedTime],
	UserExampleColumnMap[UserExampleColumnName_UpdatedTime],
}
